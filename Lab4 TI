import time
from urllib.request import urlopen

# URL веб-страницы
URL = 'https://en.wikipedia.org/wiki/List_of_Glagolitic_books'

# Функция загрузки HTML-контента по URL
def fetch_html(url):
    """
    Загружает содержимое веб-страницы в виде HTML.
    """
    with urlopen(url) as response:
        html = response.read().decode('utf-8')
    return html

# Реализация наивного алгоритма поиска подстроки
def naive_search(text, pattern):
    """
    Находит все вхождения подстроки `pattern` в строке `text` методом полного перебора.
    Возвращает список индексов начала вхождений.
    """
    n = len(text)
    m = len(pattern)
    indices = []

    for i in range(n - m + 1):  # Перебираем каждую позицию начала поиска
        match = True
        for j in range(m):  # Проверяем совпадение символов
            if text[i + j] != pattern[j]:
                match = False
                break
        if match:
            indices.append(i)
    
    return indices

# Функция для вычисления массива LPS (Longest Prefix which is also Suffix)
def compute_lps(pattern):
    """
    Вычисляет массив LPS (Longest Prefix which is also Suffix) для шаблона.
    """
    lps = [0] * len(pattern)
    length = 0  # Длина предыдущего префикса
    i = 1

    while i < len(pattern):
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]  # Переход к предыдущему префиксу
            else:
                lps[i] = 0
                i += 1
    
    return lps

# Реализация алгоритма КМП
def kmp_search(text, pattern):
    """
    Находит все вхождения подстроки `pattern` в строке `text` методом КМП.
    Возвращает список индексов начала вхождений.
    """
    lps = compute_lps(pattern)  # Предварительная обработка шаблона
    indices = []
    i = 0  # Индекс текста
    j = 0  # Индекс шаблона

    while i < len(text):
        if text[i] == pattern[j]:
            i += 1
            j += 1

        if j == len(pattern):  # Найдено совпадение
            indices.append(i - j)
            j = lps[j - 1]  # Переход по LPS
        elif i < len(text) and text[i] != pattern[j]:  # Несовпадение
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    
    return indices

# Удаление HTML-тегов наивным методом
def remove_tags_naive(html):
    """
    Удаляет все HTML-теги из строки `html` наивным методом.
    Игнорирует все символы между '<' и '>'.
    """
    result = []
    in_tag = False

    for char in html:
        if char == '<':  # Начало тега
            in_tag = True
        elif char == '>':  # Конец тега
            in_tag = False
            continue
        if not in_tag:
            result.append(char)
    
    return ''.join(result)

# Удаление HTML-тегов методом КМП
def remove_tags_kmp(html):
    """
    Удаляет все HTML-теги из строки `html` методом КМП.
    Ищет позиции '<' и '>' и удаляет содержимое между ними.
    """
    open_tag = '<'
    close_tag = '>'
    open_indices = kmp_search(html, open_tag)
    close_indices = kmp_search(html, close_tag)

    # Удаление парных тегов
    result = []
    close_ptr = 0
    last_idx = 0

    for open_idx in open_indices:
        while close_ptr < len(close_indices) and close_indices[close_ptr] < open_idx:
            close_ptr += 1
        if close_ptr < len(close_indices):
            close_idx = close_indices[close_ptr]
            result.append(html[last_idx:open_idx])  # Добавляем текст до тега
            last_idx = close_idx + 1
            close_ptr += 1

    result.append(html[last_idx:])  # Добавляем остаток строки
    return ''.join(result)

# Основная программа
def main():
    # Шаг 1: Загрузка HTML-контента
    print("Загрузка HTML-контента...")
    html = fetch_html(URL)
    print("Загрузка завершена.\n")

    # Шаг 2: Удаление тегов наивным методом
    print("Удаление HTML-тегов наивным методом...")
    start_time = time.time()
    text_naive = remove_tags_naive(html)
    naive_time = time.time() - start_time
    print(f"Наивный метод завершен за {naive_time:.6f} секунд.\n")

    # Шаг 3: Удаление тегов методом КМП
    print("Удаление HTML-тегов методом КМП...")
    start_time = time.time()
    text_kmp = remove_tags_kmp(html)
    kmp_time = time.time() - start_time
    print(f"Метод КМП завершен за {kmp_time:.6f} секунд.\n")

    # Сравнение результатов
    print("Сравнение результатов:")
    print(f"Наивный метод: {len(text_naive)} символов")
    print(f"Метод КМП:     {len(text_kmp)} символов")

    # Сохранение результатов
    with open('text_naive.txt', 'w', encoding='utf-8') as f:
        f.write(text_naive)
    with open('text_kmp.txt', 'w', encoding='utf-8') as f:
        f.write(text_kmp)
    print("Результаты сохранены в файлы 'text_naive.txt' и 'text_kmp.txt'.")

if __name__ == "__main__":
    main()
